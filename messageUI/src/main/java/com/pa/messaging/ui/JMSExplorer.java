package com.pa.messaging.ui;

import com.pa.messaging.connection.ConnectionUtils;
import com.pa.messaging.data.DataService;
import com.pa.messaging.data.JMSConnection;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Queue;
import javax.jms.QueueBrowser;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.command.ActiveMQQueue;
import org.apache.activemq.command.ActiveMQTopic;
import org.apache.commons.lang3.exception.ExceptionUtils;

/**
 *
 * @author paul.anderson
 */
public class JMSExplorer extends javax.swing.JFrame implements IMessageSink {

	private Connection conn;
	private JMSConnection currentConnectionObject = null;
	private Session testSession;
	private final DefaultListModel<JMSConnection> connectionsModel = new DefaultListModel<>();
	private final DefaultListModel<Queue> queuesModel = new DefaultListModel<>();
	private final DefaultListModel<Topic> topicsModel = new DefaultListModel<>();
	private final DefaultTableModel msgPropertyTableModel = new DefaultTableModel();
	private final Set<String> connectionNames = new HashSet<>();
	private Session topicSession = null;
	private Session queueSession = null;
	private QueueBrowser queueBrowser = null;
	private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("hh:mm:ss.SSS");
	private final SelectedTopicListener selectedTopicListener = new SelectedTopicListener(this);
	private Destination currentDestination;
	private MessageConsumer consumer;

	/**
	 * Creates new form JMSExplorer
	 */
	public JMSExplorer() {
		initComponents();
		loadConnections();
		msgPropertyTableModel.addColumn("property");
		msgPropertyTableModel.addColumn("value");
	}

	private void loadConnections() {
		DataService.readConnections().stream().forEach(connectionsModel::addElement);
	}

	@Override
	public void receiveMessage(Message msg) {
		DefaultTableModel model = (DefaultTableModel) jtableMessages.getModel();
		if (model.getColumnCount() == 0) {
			model.addColumn("message");
			model.addColumn("time");
		}
		int row = model.getRowCount();
		model.addRow(new Object[2]);
		model.setValueAt(msg, row, 0);
		String stamp;
		try {
			stamp = Instant.ofEpochMilli(msg.getJMSTimestamp()).atZone(ZoneId.systemDefault()).format(dateTimeFormatter);
			model.setValueAt(stamp, row, 1);
		} catch (JMSException ex) {
			logMessage(ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
	 * Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    desktopPane = new javax.swing.JDesktopPane();
    jInternalFrame1 = new javax.swing.JInternalFrame();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    lstBrokers = new javax.swing.JList<JMSConnection>();
    btnDeleteConnection = new javax.swing.JButton();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel2 = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel4 = new javax.swing.JPanel();
    jLabel6 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    lstQueues = new javax.swing.JList<Queue>();
    jPanel5 = new javax.swing.JPanel();
    jLabel7 = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    lstTopics = new javax.swing.JList<Topic>();
    jPanel3 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    txtBrokerURL = new javax.swing.JTextField();
    txtUserName = new javax.swing.JTextField();
    txtPassword = new javax.swing.JPasswordField();
    txtConnectionName = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    btnSaveConnection = new javax.swing.JButton();
    btnTestConnection = new javax.swing.JButton();
    jInternalFrame2 = new javax.swing.JInternalFrame();
    jScrollPane2 = new javax.swing.JScrollPane();
    textAreaLogs = new javax.swing.JTextPane();
    btnClearLogs = new javax.swing.JButton();
    jInternalFrameMessages = new javax.swing.JInternalFrame();
    jSplitPane2 = new javax.swing.JSplitPane();
    jScrollPane5 = new javax.swing.JScrollPane();
    jtableMessages = new javax.swing.JTable();
    jsplitMessageDetails = new javax.swing.JSplitPane();
    jScrollPane6 = new javax.swing.JScrollPane();
    textAreaMessageContent = new javax.swing.JTextArea();
    jScrollPane7 = new javax.swing.JScrollPane();
    tableMessageHeaders = new javax.swing.JTable();
    jLabel8 = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    btnPurgeQueue = new javax.swing.JButton();
    jInternalFrame4 = new javax.swing.JInternalFrame();
    btnSendMessage = new javax.swing.JButton();
    jScrollPane8 = new javax.swing.JScrollPane();
    textareaMsgToSend = new javax.swing.JTextArea();
    menuBar = new javax.swing.JMenuBar();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    desktopPane.setLayout(null);

    jInternalFrame1.setVisible(true);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("connections");

    lstBrokers.setModel(connectionsModel);
    lstBrokers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    lstBrokers.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        lstBrokersMouseReleased(evt);
      }
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        lstBrokersMouseClicked(evt);
      }
    });
    jScrollPane3.setViewportView(lstBrokers);

    btnDeleteConnection.setText("delete selected");
    btnDeleteConnection.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnDeleteConnectionMouseReleased(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnDeleteConnection)))
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnDeleteConnection))
    );

    jSplitPane1.setDividerLocation(160);
    jSplitPane1.setDividerSize(2);

    jLabel6.setText("  queues");

    lstQueues.setModel(queuesModel);
    lstQueues.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    lstQueues.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        lstQueuesMouseReleased(evt);
      }
    });
    jScrollPane1.setViewportView(lstQueues);

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel6)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel6)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        .addContainerGap())
    );

    jSplitPane1.setLeftComponent(jPanel4);

    jLabel7.setText("  topics");

    lstTopics.setModel(topicsModel);
    lstTopics.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        lstTopicsMouseReleased(evt);
      }
    });
    jScrollPane4.setViewportView(lstTopics);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel7)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(14, 14, 14))
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel7)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        .addContainerGap())
    );

    jSplitPane1.setRightComponent(jPanel5);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane1)
    );

    jTabbedPane1.addTab("connections", jPanel2);

    jLabel2.setText("broker URL");

    jLabel3.setText("user name");

    jLabel4.setText("password");

    txtBrokerURL.setText("tcp://localhost:61616");
    txtBrokerURL.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtBrokerURLKeyReleased(evt);
      }
    });

    txtUserName.setText("mquser");
    txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtUserNameKeyReleased(evt);
      }
    });

    txtPassword.setText("pwd123");
    txtPassword.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtPasswordActionPerformed(evt);
      }
    });
    txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtPasswordKeyReleased(evt);
      }
    });

    txtConnectionName.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtConnectionNameKeyReleased(evt);
      }
    });

    jLabel5.setText("name");

    btnSaveConnection.setText("save");
    btnSaveConnection.setEnabled(false);
    btnSaveConnection.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnSaveConnectionMouseReleased(evt);
      }
    });

    btnTestConnection.setText("test");
    btnTestConnection.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnTestConnectionMouseReleased(evt);
      }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel3)
          .addComponent(jLabel4)
          .addComponent(jLabel2)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(btnSaveConnection)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnTestConnection)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(txtConnectionName)
              .addComponent(txtBrokerURL, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
              .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(53, Short.MAX_VALUE))))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(txtConnectionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(txtBrokerURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnSaveConnection)
          .addComponent(btnTestConnection))
        .addContainerGap(93, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("connection manager", jPanel3);

    javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
    jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
    jInternalFrame1Layout.setHorizontalGroup(
      jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        .addContainerGap())
    );
    jInternalFrame1Layout.setVerticalGroup(
      jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jTabbedPane1))
        .addContainerGap())
    );

    desktopPane.add(jInternalFrame1);
    jInternalFrame1.setBounds(0, 0, 630, 360);

    jInternalFrame2.setTitle("logs & messages");
    jInternalFrame2.setVisible(true);

    jScrollPane2.setViewportView(textAreaLogs);

    btnClearLogs.setText("clear");
    btnClearLogs.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnClearLogsMouseReleased(evt);
      }
    });

    javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
    jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
    jInternalFrame2Layout.setHorizontalGroup(
      jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addGroup(jInternalFrame2Layout.createSequentialGroup()
            .addComponent(btnClearLogs)
            .addGap(0, 369, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jInternalFrame2Layout.setVerticalGroup(
      jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnClearLogs)
        .addGap(5, 5, 5)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        .addContainerGap())
    );

    desktopPane.add(jInternalFrame2);
    jInternalFrame2.setBounds(930, 300, 480, 370);

    jInternalFrameMessages.setResizable(true);
    jInternalFrameMessages.setVisible(true);
    jInternalFrameMessages.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        jInternalFrameMessagesComponentResized(evt);
      }
    });

    jSplitPane2.setDividerLocation(401);

    jtableMessages.setModel(msgPropertyTableModel);
    jtableMessages.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    jtableMessages.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtableMessagesMouseClicked(evt);
      }
    });
    jScrollPane5.setViewportView(jtableMessages);

    jSplitPane2.setLeftComponent(jScrollPane5);

    jsplitMessageDetails.setDividerLocation(102);
    jsplitMessageDetails.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    textAreaMessageContent.setColumns(20);
    textAreaMessageContent.setRows(5);
    jScrollPane6.setViewportView(textAreaMessageContent);

    jsplitMessageDetails.setTopComponent(jScrollPane6);

    tableMessageHeaders.setModel(msgPropertyTableModel);
    jScrollPane7.setViewportView(tableMessageHeaders);

    jsplitMessageDetails.setRightComponent(jScrollPane7);

    jSplitPane2.setRightComponent(jsplitMessageDetails);

    jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
    jLabel8.setText("  messages");

    jLabel9.setText("contents of selected message                         ");

    btnPurgeQueue.setText("purge messages");
    btnPurgeQueue.setEnabled(false);
    btnPurgeQueue.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPurgeQueueActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jInternalFrameMessagesLayout = new javax.swing.GroupLayout(jInternalFrameMessages.getContentPane());
    jInternalFrameMessages.getContentPane().setLayout(jInternalFrameMessagesLayout);
    jInternalFrameMessagesLayout.setHorizontalGroup(
      jInternalFrameMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrameMessagesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrameMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jInternalFrameMessagesLayout.createSequentialGroup()
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnPurgeQueue)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel9))
          .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE))
        .addContainerGap())
    );
    jInternalFrameMessagesLayout.setVerticalGroup(
      jInternalFrameMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrameMessagesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrameMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(jLabel9)
          .addComponent(btnPurgeQueue))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        .addContainerGap())
    );

    desktopPane.add(jInternalFrameMessages);
    jInternalFrameMessages.setBounds(20, 380, 900, 340);

    jInternalFrame4.setTitle("send message to selected destination");
    jInternalFrame4.setVisible(true);

    btnSendMessage.setText("send");
    btnSendMessage.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnSendMessageMouseReleased(evt);
      }
    });

    textareaMsgToSend.setColumns(20);
    textareaMsgToSend.setRows(5);
    jScrollPane8.setViewportView(textareaMsgToSend);

    javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
    jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
    jInternalFrame4Layout.setHorizontalGroup(
      jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jInternalFrame4Layout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
          .addGroup(jInternalFrame4Layout.createSequentialGroup()
            .addComponent(btnSendMessage)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jInternalFrame4Layout.setVerticalGroup(
      jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnSendMessage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
        .addContainerGap())
    );

    desktopPane.add(jInternalFrame4);
    jInternalFrame4.setBounds(660, 0, 620, 300);

    helpMenu.setMnemonic('h');
    helpMenu.setText("Help");

    aboutMenuItem.setMnemonic('a');
    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1299, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
		// TODO add your handling code here:
  }//GEN-LAST:event_txtPasswordActionPerformed

  private void btnTestConnectionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestConnectionMouseReleased
		try {
			conn = doConnect();
			testSession = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
			quietlyCloseSession(testSession);
			conn.close();
		} catch (JMSException x) {
			String stackTrace = ExceptionUtils.getStackTrace(x);
			logMessage(stackTrace);
			return;
		}
		logMessage("connection succeeded");

		if (!connectionNames.contains(txtConnectionName.getText().trim())) {
			connectionNames.add(txtConnectionName.getText().trim());
			btnSaveConnection.setEnabled(true);
		}

  }//GEN-LAST:event_btnTestConnectionMouseReleased

	private void logMessage(String msg) {
		try {
			textAreaLogs.getDocument().insertString(textAreaLogs.getText().length(), msg + "\n", null);
		} catch (BadLocationException ex) {
			textAreaLogs.setText(msg);
		}
	}

	private void logMessage(Throwable t) {
		logMessage(ExceptionUtils.getMessage(t));
	}

  private void btnClearLogsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearLogsMouseReleased
		textAreaLogs.setText("");
  }//GEN-LAST:event_btnClearLogsMouseReleased

  private void btnSaveConnectionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveConnectionMouseReleased
		JMSConnection co = new JMSConnection(txtConnectionName.getText(), txtBrokerURL.getText(), txtUserName.getText(), new String(txtPassword.getPassword()));
		if (!connectionsModel.contains(co)) {
			DataService.storeNewConnection(txtConnectionName.getText(), txtBrokerURL.getText(), txtUserName.getText(), new String(txtPassword.getPassword()));
			connectionsModel.addElement(co);
			btnSaveConnection.setEnabled(false);
			connectionNames.add(txtConnectionName.getText().trim());
		} else {//we are editing an existing connection
			currentConnectionObject = DataService.editConnection(txtConnectionName.getText(), txtBrokerURL.getText(), txtUserName.getText(), new String(txtPassword.getPassword()));
			txtBrokerURL.setText(currentConnectionObject.getBrokerUrl());
			txtUserName.setText(currentConnectionObject.getUserName());
			txtPassword.setText(currentConnectionObject.getPassword());
		}
  }//GEN-LAST:event_btnSaveConnectionMouseReleased

  private void txtConnectionNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConnectionNameKeyReleased
		canEnableSave();
  }//GEN-LAST:event_txtConnectionNameKeyReleased

  private void txtBrokerURLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrokerURLKeyReleased
		canEnableSave();
  }//GEN-LAST:event_txtBrokerURLKeyReleased

  private void txtUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyReleased
		canEnableSave();
  }//GEN-LAST:event_txtUserNameKeyReleased

  private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
		canEnableSave();
  }//GEN-LAST:event_txtPasswordKeyReleased

  private void lstBrokersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstBrokersMouseReleased

  }//GEN-LAST:event_lstBrokersMouseReleased

  private void lstBrokersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstBrokersMouseClicked
		currentConnectionObject = lstBrokers.getSelectedValue();
		queuesModel.clear();
		topicsModel.clear();
		Session localSession = null;
		try {
			if (conn != null) {
				conn.close();
			}

			conn = currentConnectionObject.connect();
			conn.start();
			localSession = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
			Set<ActiveMQQueue> queues = ((ActiveMQConnection) conn).getDestinationSource().getQueues();
			Set<ActiveMQTopic> topics = ((ActiveMQConnection) conn).getDestinationSource().getTopics();
			queues.stream().forEach((q) -> {
				queuesModel.addElement((Queue) q);
			});

			topics.stream().forEach((t) -> {
				topicsModel.addElement(t);
			});

		} catch (Exception x) {
			//once in a very long while we won't throw an exception.
			logMessage(String.format("broker %s is currently not reachable, or is not running: %s", currentConnectionObject.getBrokerUrl(), ExceptionUtils.getMessage(x)));
		} finally {
			quietlyCloseSession(localSession);
		}
		txtUserName.setText(currentConnectionObject.getUserName());
		txtConnectionName.setText(currentConnectionObject.getConnectionName());
		txtPassword.setText(currentConnectionObject.getPassword());
		txtBrokerURL.setText(currentConnectionObject.getBrokerUrl());
		btnSaveConnection.setEnabled(false);

  }//GEN-LAST:event_lstBrokersMouseClicked

  private void jtableMessagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableMessagesMouseClicked
		Message selectedMessage = (Message) jtableMessages.getModel().getValueAt(jtableMessages.getSelectedRow(), 0);
		if (selectedMessage instanceof TextMessage) {
			try {
				textAreaMessageContent.setText(((TextMessage) selectedMessage).getText());
				clearTableModel(msgPropertyTableModel);

				int row = 0;
				setHeaderData(row++, "JMSMessageID", selectedMessage.getJMSMessageID());
				setHeaderData(row++, "JMSPriority", selectedMessage.getJMSPriority());
				setHeaderData(row++, "JMSReplyTo", selectedMessage.getJMSReplyTo());
				setHeaderData(row++, "JMSType", selectedMessage.getJMSType());
				setHeaderData(row++, "JMSCorrelationID", selectedMessage.getJMSCorrelationID());
				setHeaderData(row++, "JMSDeliveryMode", selectedMessage.getJMSDeliveryMode());
				setHeaderData(row++, "JMSDestination", selectedMessage.getJMSDestination());
				setHeaderData(row++, "JMSExpiration", selectedMessage.getJMSExpiration());
				setHeaderData(row++, "JMSRedelivered", selectedMessage.getJMSRedelivered());
				setHeaderData(row++, "JMSTimestamp", selectedMessage.getJMSTimestamp());
				row++;
			} catch (JMSException ex) {
				logMessage(ex);
			}
		}
  }//GEN-LAST:event_jtableMessagesMouseClicked

	private void setHeaderData(int row, String name, Object value) {
		msgPropertyTableModel.addRow(new Object[2]);
		msgPropertyTableModel.setValueAt(name, row, 0);
		msgPropertyTableModel.setValueAt(value, row, 1);

	}

	private void clearTableModel(DefaultTableModel model) {
		int nrows = model.getRowCount();
		for (int i = 0; i < nrows; i++) {
			model.removeRow(0);
		}
	}

	private void closeConsumer() {
		if (consumer != null) {
			try {
				consumer.close();
			} catch (JMSException ex) {
				logMessage(ex);
			}
		}
	}

  private void lstTopicsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstTopicsMouseReleased
		btnPurgeQueue.setEnabled(false);
		closeConsumer();
		getTopicSession();
		currentDestination = (Destination) lstTopics.getSelectedValue();
		lstQueues.clearSelection();
		lstQueues.getSelectionModel().clearSelection();
		Topic topic = lstTopics.getSelectedValue();
		DefaultTableModel model = new DefaultTableModel();
		jtableMessages.setModel(model);
		model.addColumn("message");
		model.addColumn("time");
		try {
			consumer = topicSession.createConsumer(topic);
			consumer.setMessageListener(selectedTopicListener);
		} catch (JMSException ex) {
			logMessage(ex);
		}
  }//GEN-LAST:event_lstTopicsMouseReleased

	private void getQueueSession() {
		if (queueSession != null) {
			quietlyCloseSession(queueSession);
		}

		try {
			queueSession = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);
		} catch (JMSException ex) {
			logMessage(ex);
		}
	}

	private void getTopicSession() {
		if (topicSession != null) {
			quietlyCloseSession(topicSession);
		}

		try {
			topicSession = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);
		} catch (JMSException ex) {
			logMessage(ex);
		}
	}

  private void btnDeleteConnectionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteConnectionMouseReleased
		try {
			DataService.deleteConnection(lstBrokers.getSelectedValue());
		} catch (Exception x) {
			logMessage(x);
			return;
		}
		txtConnectionName.setText(null);
		txtUserName.setText(null);
		txtPassword.setText(null);
		txtBrokerURL.setText(null);
		((DefaultListModel<JMSConnection>) lstBrokers.getModel()).remove(lstBrokers.getSelectedIndex());
  }//GEN-LAST:event_btnDeleteConnectionMouseReleased

  private void lstQueuesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstQueuesMouseReleased
		btnPurgeQueue.setEnabled(false);
		closeConsumer();
		getQueueSession();
		currentDestination = (Destination) lstQueues.getSelectedValue();
		clearTableModel(msgPropertyTableModel);
		clearTableModel((DefaultTableModel) jtableMessages.getModel());
		lstTopics.clearSelection();
		lstTopics.getSelectionModel().clearSelection();
		textAreaMessageContent.setText("");
		buildMessageList();
  }//GEN-LAST:event_lstQueuesMouseReleased

	private void buildMessageList() {
		Queue queue = lstQueues.getSelectedValue();
		int row = 0;
		DefaultTableModel model = new DefaultTableModel();
		jtableMessages.setModel(model);
		model.addColumn("message");
		model.addColumn("time");

		if (queueSession != null)
		try {
			queueBrowser = queueSession.createBrowser(queue);
			Enumeration<Message> e = queueBrowser.getEnumeration();
			while (e.hasMoreElements()) {
				model.addRow(new Object[2]);
				Message m = e.nextElement();
				model.setValueAt(m, row, 0);
				String stamp = Instant.ofEpochMilli(m.getJMSTimestamp()).atZone(ZoneId.systemDefault()).format(dateTimeFormatter);
				model.setValueAt(stamp, row, 1);
				row++;
				System.out.println("message displayed");
			}
		} catch (JMSException ex) {
			logMessage(ex);
			return;
		} finally {
			quietlyClose(queueBrowser);
			quietlyCloseSession(queueSession);
		}
		if (row > 0) {
			btnPurgeQueue.setEnabled(true);
		}
	}

	private void quietlyClose(QueueBrowser browser) {
		try {
			browser.close();
		} catch (JMSException ex) {
			logMessage(ex);
		}
	}

	private void quietlyCloseSession(Session s) {
		if (s == null){
			return;
		}
		try {
			s.close();
			s = null;
		} catch (Throwable ex) {
		}
	}

  private void btnSendMessageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMessageMouseReleased
		try {

			Session s = conn.createSession(true, Session.AUTO_ACKNOWLEDGE);
			Message msg = s.createTextMessage(textareaMsgToSend.getText());
			s.createProducer(currentDestination).send(msg);
			s.commit();
		} catch (JMSException ex) {
			logMessage(ex);
		} finally {
			if (testSession != null) {
					quietlyCloseSession(testSession);
			}
		}
  }//GEN-LAST:event_btnSendMessageMouseReleased

  private void btnPurgeQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurgeQueueActionPerformed
		Connection conn2 = null;
		try {
			conn2 = currentConnectionObject.connect();
		} catch (JMSException ex) {
			logMessage(ex);
			return;
		}
		Session s;
		MessageConsumer c;
		try {
			s = conn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
			conn2.start();

			c = s.createConsumer(currentDestination);

		} catch (JMSException ex) {
			logMessage(ex);
			return;
		}

		try {
			while (true) {
				Message m = c.receive(50);
				if (m == null) {
					break;
				}
			}
		} catch (Throwable ex) {
			logMessage(ex);
		} finally {
			quietlyCloseSession(s);
		}
		buildMessageList();
  }//GEN-LAST:event_btnPurgeQueueActionPerformed

  private void jInternalFrameMessagesComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jInternalFrameMessagesComponentResized
		jsplitMessageDetails.setDividerLocation(0.5d);
  }//GEN-LAST:event_jInternalFrameMessagesComponentResized

	private void canEnableSave() {
		boolean named = txtConnectionName.getText() != null && !txtConnectionName.getText().trim().equals("");
		boolean brokerDefined = txtBrokerURL.getText() != null && !txtBrokerURL.getText().trim().equals("");
		boolean hasUserName = txtUserName.getText() != null && !txtUserName.getText().trim().equals("");
		boolean hasPwd = txtPassword.getText() != null && !txtPassword.getText().trim().equals("");

		boolean canEnable = named && brokerDefined && hasUserName && hasPwd;
		btnSaveConnection.setEnabled(canEnable);
	}

	private Connection doConnect()
					throws JMSException {
		String brokerURL = txtBrokerURL.getText();
		String userName = txtUserName.getText();
		String password = txtPassword.getText();
		Connection conn = null;
		try {
			return connectBroker(brokerURL, userName, password);
		} catch (JMSException ex) {
			logMessage(ex);
			return null;
		}
	}

	private Connection connectBroker(String brokerURL, String userName, String password)
					throws JMSException {
		Connection connection = null;
		connection = ConnectionUtils.connectToBroker(brokerURL, userName, password);
		return connection;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Mac OS X".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JMSExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JMSExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JMSExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JMSExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JMSExplorer().setVisible(true);
			}
		});
	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JButton btnClearLogs;
  private javax.swing.JButton btnDeleteConnection;
  private javax.swing.JButton btnPurgeQueue;
  private javax.swing.JButton btnSaveConnection;
  private javax.swing.JButton btnSendMessage;
  private javax.swing.JButton btnTestConnection;
  private javax.swing.JDesktopPane desktopPane;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JInternalFrame jInternalFrame1;
  private javax.swing.JInternalFrame jInternalFrame2;
  private javax.swing.JInternalFrame jInternalFrame4;
  private javax.swing.JInternalFrame jInternalFrameMessages;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JScrollPane jScrollPane7;
  private javax.swing.JScrollPane jScrollPane8;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JSplitPane jsplitMessageDetails;
  private javax.swing.JTable jtableMessages;
  private javax.swing.JList<JMSConnection> lstBrokers;
  private javax.swing.JList<Queue> lstQueues;
  private javax.swing.JList<Topic> lstTopics;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JTable tableMessageHeaders;
  private javax.swing.JTextPane textAreaLogs;
  private javax.swing.JTextArea textAreaMessageContent;
  private javax.swing.JTextArea textareaMsgToSend;
  private javax.swing.JTextField txtBrokerURL;
  private javax.swing.JTextField txtConnectionName;
  private javax.swing.JPasswordField txtPassword;
  private javax.swing.JTextField txtUserName;
  // End of variables declaration//GEN-END:variables

}

package com.panderson.jpatool;

import com.onemain.merchantsvc.merchantreferral.MERtblMerchant;
import com.onemain.merchantsvc.merchantreferral.MERtblMerchantStatus;
import com.onemain.merchantsvc.merchantreferral.MERtblMerchantStatusType;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.SpinnerNumberModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author paul.anderson
 */
public class JPAWindow extends javax.swing.JFrame {

	private final ApplicationContext springContext;
	private final TreeModel objectTree = new DefaultTreeModel(null);
	private PersistenceManager persistenceManager = new PersistenceManager();
	private static final Class[] simpleType = new Class[]{Object.class, String.class, Double.class, Integer.class, Date.class, Float.class, Short.class, Boolean.class};
	private static Set<Class> simpleTypes;
	private final ImageIcon objectIcon;
	private static EntityManagerFactory f = null;
	private Map<String, EntityManagerFactory> emfs;

	/**
	 * Creates new form JPAWindow
	 */
	public JPAWindow() {
		objectIcon = createImageIcon("images/object.png");
		simpleTypes = new HashSet<>(Arrays.asList(simpleType));
		springContext = new ClassPathXmlApplicationContext("xml/newSpringXMLConfig.xml");
		emfs = springContext.getBeansOfType(EntityManagerFactory.class);

		initComponents();
		setupPersistenceUnits();
		btnReconnect.setEnabled(false);
		treeObjects.setModel(objectTree);
		treeObjects.setCellRenderer(new CustomRenderer(objectIcon));
		spnMaxResults.setModel(new SpinnerNumberModel(5, 5, 50, 5));
	}

	private void setupPersistenceUnits() {
		DefaultListModel<String> puListModel = new DefaultListModel<>();
		lstPersistenceUnits.setModel(puListModel);

		List<String> emfsList = new ArrayList<>();
		emfsList.addAll(emfs.keySet());
		emfsList.sort(null);
		for (String emfName : emfsList) {
			puListModel.addElement(emfName);
		}
		if (puListModel.size() == 1) {
			lstPersistenceUnits.setSelectedIndex(0);
		}
	}

	private void setEntityManagerFactory(String emfName) {
		f = springContext.getBean(emfName, EntityManagerFactory.class);
		EntityManager em = null;
		try {
			em = f.createEntityManager();
		} catch (Throwable t) {
			handleError(t);
			return;
		}
		persistenceManager.setEntityManagerFactory(f);
		btnReconnect.setEnabled(em != null);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
	 * Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    desktopPane = new javax.swing.JDesktopPane();
    jInternalFrame1 = new javax.swing.JInternalFrame();
    jLabel1 = new javax.swing.JLabel();
    btnTestQuery = new javax.swing.JButton();
    cbRealTime = new javax.swing.JCheckBox();
    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    txtQuery = new javax.swing.JTextArea();
    jScrollPane3 = new javax.swing.JScrollPane();
    treeObjects = new javax.swing.JTree();
    cbIsUpdateQuery = new javax.swing.JCheckBox();
    spnMaxResults = new javax.swing.JSpinner();
    jLabel2 = new javax.swing.JLabel();
    jInternalFrame2 = new javax.swing.JInternalFrame();
    jScrollPane2 = new javax.swing.JScrollPane();
    errorText = new javax.swing.JTextArea();
    jButton1 = new javax.swing.JButton();
    jInternalFrame3 = new javax.swing.JInternalFrame();
    jScrollPane4 = new javax.swing.JScrollPane();
    lstPersistenceUnits = new javax.swing.JList<>();
    btnReconnect = new javax.swing.JButton();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    openMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    cutMenuItem = new javax.swing.JMenuItem();
    copyMenuItem = new javax.swing.JMenuItem();
    pasteMenuItem = new javax.swing.JMenuItem();
    deleteMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentMenuItem = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    desktopPane.setLayout(null);

    jInternalFrame1.setResizable(true);
    jInternalFrame1.setVisible(true);

    jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
    jLabel1.setText("JPA Query");

    btnTestQuery.setText("test");
    btnTestQuery.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        btnTestQueryMouseReleased(evt);
      }
    });

    cbRealTime.setText("real-time?");
    cbRealTime.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbRealTimeActionPerformed(evt);
      }
    });

    jSplitPane1.setDividerLocation(90);
    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    txtQuery.setColumns(20);
    txtQuery.setFont(new java.awt.Font("Source Code Pro", 0, 16)); // NOI18N
    txtQuery.setRows(5);
    txtQuery.setText("SELECT user FROM \n   Notification notif, \n      IN (notif.notificationUserList) user \nwhere \n   user.acknowledged = 0 and \n   notif.classification.classification='GENERAL'");
    txtQuery.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtQueryKeyReleased(evt);
      }
    });
    jScrollPane1.setViewportView(txtQuery);

    jSplitPane1.setTopComponent(jScrollPane1);

    treeObjects.setFont(new java.awt.Font("Source Code Pro", 0, 16)); // NOI18N
    treeObjects.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
        treeObjectsValueChanged(evt);
      }
    });
    jScrollPane3.setViewportView(treeObjects);

    jSplitPane1.setRightComponent(jScrollPane3);

    cbIsUpdateQuery.setText("is update-query");

    jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
    jLabel2.setText("limit result-count");

    javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
    jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
    jInternalFrame1Layout.setHorizontalGroup(
      jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSplitPane1)
          .addGroup(jInternalFrame1Layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(cbRealTime)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnTestQuery)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(cbIsUpdateQuery)
            .addGap(123, 123, 123)
            .addComponent(spnMaxResults, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addGap(0, 444, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jInternalFrame1Layout.setVerticalGroup(
      jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cbRealTime)
          .addComponent(btnTestQuery)
          .addComponent(cbIsUpdateQuery)
          .addComponent(spnMaxResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        .addContainerGap())
    );

    desktopPane.add(jInternalFrame1);
    jInternalFrame1.setBounds(0, 0, 1200, 590);

    jInternalFrame2.setResizable(true);
    jInternalFrame2.setTitle("log window");
    jInternalFrame2.setVisible(true);

    errorText.setColumns(20);
    errorText.setRows(5);
    jScrollPane2.setViewportView(errorText);

    jButton1.setText("clear");
    jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jButton1MouseReleased(evt);
      }
    });

    javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
    jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
    jInternalFrame2Layout.setHorizontalGroup(
      jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1144, Short.MAX_VALUE)
          .addGroup(jInternalFrame2Layout.createSequentialGroup()
            .addComponent(jButton1)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jInternalFrame2Layout.setVerticalGroup(
      jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButton1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
    );

    desktopPane.add(jInternalFrame2);
    jInternalFrame2.setBounds(10, 600, 1180, 180);

    jInternalFrame3.setTitle("select PU");
    jInternalFrame3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
    jInternalFrame3.setVisible(true);

    lstPersistenceUnits.setModel(new javax.swing.AbstractListModel<String>() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public String getElementAt(int i) { return strings[i]; }
    });
    lstPersistenceUnits.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        lstPersistenceUnitsMouseClicked(evt);
      }
    });
    lstPersistenceUnits.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        lstPersistenceUnitsValueChanged(evt);
      }
    });
    jScrollPane4.setViewportView(lstPersistenceUnits);

    btnReconnect.setText("reconnect");
    btnReconnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnReconnectActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
    jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
    jInternalFrame3Layout.setHorizontalGroup(
      jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jInternalFrame3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
          .addGroup(jInternalFrame3Layout.createSequentialGroup()
            .addComponent(btnReconnect)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jInternalFrame3Layout.setVerticalGroup(
      jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame3Layout.createSequentialGroup()
        .addComponent(btnReconnect)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    desktopPane.add(jInternalFrame3);
    jInternalFrame3.setBounds(1260, 20, 250, 220);

    fileMenu.setMnemonic('f');
    fileMenu.setText("File");

    openMenuItem.setMnemonic('o');
    openMenuItem.setText("Open");
    fileMenu.add(openMenuItem);

    saveMenuItem.setMnemonic('s');
    saveMenuItem.setText("Save");
    fileMenu.add(saveMenuItem);

    saveAsMenuItem.setMnemonic('a');
    saveAsMenuItem.setText("Save As ...");
    saveAsMenuItem.setDisplayedMnemonicIndex(5);
    fileMenu.add(saveAsMenuItem);

    exitMenuItem.setMnemonic('x');
    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setMnemonic('e');
    editMenu.setText("Edit");

    cutMenuItem.setMnemonic('t');
    cutMenuItem.setText("Cut");
    editMenu.add(cutMenuItem);

    copyMenuItem.setMnemonic('y');
    copyMenuItem.setText("Copy");
    editMenu.add(copyMenuItem);

    pasteMenuItem.setMnemonic('p');
    pasteMenuItem.setText("Paste");
    editMenu.add(pasteMenuItem);

    deleteMenuItem.setMnemonic('d');
    deleteMenuItem.setText("Delete");
    editMenu.add(deleteMenuItem);

    menuBar.add(editMenu);

    helpMenu.setMnemonic('h');
    helpMenu.setText("Help");

    contentMenuItem.setMnemonic('c');
    contentMenuItem.setText("Contents");
    helpMenu.add(contentMenuItem);

    aboutMenuItem.setMnemonic('a');
    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1665, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
			System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

	private void handleError(Throwable t) {
		Writer w = new StringWriter();
		PrintWriter pw = new PrintWriter(w);
		t.printStackTrace(pw);
		errorText.setText(w.toString());
		errorText.setCaretPosition(0);
	}

	private void clearError() {
		errorText.setText("");
	}

	private void runUpdateQuery() {
		clearError();
		String jpaQuery = txtQuery.getText();

		try {

			int res = persistenceManager.testUpdateQuery(jpaQuery);
			errorText.setText(String.format("number of affected records: %d", res));
		} catch (Throwable t) {
			handleError(t);
		}
	}

	private void runQuery() {
		clearError();
		String jpaQuery = txtQuery.getText();
		List result = null;

		try {
			result = persistenceManager.testQuery(jpaQuery, (int) spnMaxResults.getValue());
		} catch (Throwable t) {
			handleError(t);
			return;
		}

		StringBuilder sb = new StringBuilder();
		for (Object o : result) {
			sb.append(o.toString()).append('\n');
		}
		errorText.setText(sb.toString());

		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(new NodeObject("root", "root"));
		treeObjects.setModel(new DefaultTreeModel(rootNode));

		for (Object o : result) {
			if (o instanceof Object[]) {
				StringBuilder sb2 = new StringBuilder();
				for (Object obj : (Object[]) o) {
					sb2.append(obj.toString()).append(" ");
				}
				o = sb2.toString();
			}
			DefaultMutableTreeNode objectNode = new DefaultMutableTreeNode(new NodeObject(o.getClass().getSimpleName(), o));
			rootNode.add(objectNode);
			addChildren(result.get(0), objectNode);
		}
	}

	protected static ImageIcon createImageIcon(String path) {
		URL imgURL = Thread.currentThread().getContextClassLoader().getResource(path);
		if (imgURL != null) {
			return new ImageIcon(imgURL);
		}
		throw new RuntimeException("icon-image not found");
	}

	private void addChildren(Object o, DefaultMutableTreeNode currentNode) {

		if (o == null) {
			return;
		}

		Method[] methods = o.getClass().getMethods();

		for (Method method : methods) {
			if (method.getParameterCount() > 0 || !method.getName().startsWith("get") || method.getName().equals("getClass") || method.getName().equals("getBytes")) {
				continue;
			}
			DefaultMutableTreeNode newCurrentNode = null;
			try {
				newCurrentNode = new DefaultMutableTreeNode(new NodeObject(method.getName(), MethodUtils.invokeExactMethod(o, method.getName())));

			} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException ex) {
				//nothing to do here
			}
			currentNode.add(newCurrentNode);
			System.out.println("added " + newCurrentNode + " to " + currentNode);
		}

	}

	protected static boolean isComplexObject(Method method) {
		if (simpleTypes.contains(method.getReturnType())) {
			return false;
		}
		return true;
	}

	protected static boolean isComplexObject(Class clazz) {
		if (simpleTypes.contains(clazz)) {
			return false;
		}
		return true;
	}

  private void btnTestQueryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestQueryMouseReleased

		if (cbIsUpdateQuery.isSelected()) {
			runUpdateQuery();
		} else {
			runQuery();
		}
  }//GEN-LAST:event_btnTestQueryMouseReleased

  private void txtQueryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQueryKeyReleased
		if (cbRealTime.isSelected()) {
			if (cbIsUpdateQuery.isSelected()) {
				runUpdateQuery();
			} else {
				runQuery();
			}
		}
  }//GEN-LAST:event_txtQueryKeyReleased

  private void cbRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRealTimeActionPerformed
		btnTestQuery.setEnabled(!cbRealTime.isSelected());
		if (cbRealTime.isSelected()) {
			if (cbIsUpdateQuery.isSelected()) {
				runUpdateQuery();
			} else {
				runQuery();
			}
		}
  }//GEN-LAST:event_cbRealTimeActionPerformed

  private void treeObjectsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeObjectsValueChanged
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
		Object userObject = ((NodeObject) node.getUserObject()).getValue();
		if (node.getChildCount() == 0) {
			if (userObject instanceof List) {
				for (Object o : (List) userObject) {
					DefaultMutableTreeNode listItem = new DefaultMutableTreeNode(new NodeObject(o.getClass().getSimpleName(), o));
					node.add(listItem);
					addChildren(o, listItem);
				}
			} else {
				addChildren(userObject, node);
			}
		}
		treeObjects.setSelectionPath(new TreePath(node));
		treeObjects.expandPath(new TreePath(node));
  }//GEN-LAST:event_treeObjectsValueChanged

  private void lstPersistenceUnitsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPersistenceUnitsValueChanged
		changeEmf();
  }//GEN-LAST:event_lstPersistenceUnitsValueChanged

  private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
		clearError();
  }//GEN-LAST:event_jButton1MouseReleased

  private void lstPersistenceUnitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPersistenceUnitsMouseClicked
		changeEmf();
  }//GEN-LAST:event_lstPersistenceUnitsMouseClicked

  private void btnReconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReconnectActionPerformed
		changeEmf();
  }//GEN-LAST:event_btnReconnectActionPerformed

	private void changeEmf() {
		clearError();
		setEntityManagerFactory(lstPersistenceUnits.getSelectedValue());
		read();
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */

		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Windows".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException t) {
			throw new RuntimeException(t);
		}

		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JPAWindow().setVisible(true);
			}
		});
	}

	public static void read() {
		EntityManager em = f.createEntityManager();
		MERtblMerchantStatusType t = (MERtblMerchantStatusType) em.createNamedQuery("MERtblMerchantStatusType.findByType").setParameter("type", "Active").getSingleResult();
		MERtblMerchantStatus s = t.getMERtblMerchantStatusList().get(0);
		List<MERtblMerchant> mm = em.createNamedQuery("MERtblMerchant.findByMerchantStatus").setParameter("status", s).getResultList();
		
		System.out.println(t);

	}


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JButton btnReconnect;
  private javax.swing.JButton btnTestQuery;
  private javax.swing.JCheckBox cbIsUpdateQuery;
  private javax.swing.JCheckBox cbRealTime;
  private javax.swing.JMenuItem contentMenuItem;
  private javax.swing.JMenuItem copyMenuItem;
  private javax.swing.JMenuItem cutMenuItem;
  private javax.swing.JMenuItem deleteMenuItem;
  private javax.swing.JDesktopPane desktopPane;
  private javax.swing.JMenu editMenu;
  private javax.swing.JTextArea errorText;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JButton jButton1;
  private javax.swing.JInternalFrame jInternalFrame1;
  private javax.swing.JInternalFrame jInternalFrame2;
  private javax.swing.JInternalFrame jInternalFrame3;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JList<String> lstPersistenceUnits;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem openMenuItem;
  private javax.swing.JMenuItem pasteMenuItem;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JSpinner spnMaxResults;
  private javax.swing.JTree treeObjects;
  private javax.swing.JTextArea txtQuery;
  // End of variables declaration//GEN-END:variables

}
